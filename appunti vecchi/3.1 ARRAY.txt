ARRAY
Collezione organizzata di oggetti dello stesso tipo identificabili tramite indici 
(se la dimensione è N, gli oggetti vanno da 0 a N-1)

Dichiarazione:

	int nome[dimensione];   posso usare anche alti oggetti float, char,ecc...


Inserire un valore in una casella (posizione) dell'array:

	nome[posizione]= valore;

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  
INIZZIALIZZAZIONE:

	in nome [numero] = {0} 	// inizzializza tutti gli elementi a zero 

	int nome[numero] = { 7, 23, numeri... ,...,..., }	 
			
			tra le parentesi quadre non si mette la dimensione,
			perch eviene ricavata dal numero degli elementi 
			messi tra le parentesi graffe
 
	char nome[numero] ={nel caso di un array di caratteri non sono                                    obbligato a mettere i (;) per dividere gli 
                            elementi, il sistema inserirà un carattere in                             ogni casella}
	
	char nome[] = "stringa di caratteri"   /* l'array verra inizzializato 
						   con una dimensione di 20 
						   caratteri senza doverlo 
						   specificare tra le 
						   parentesi quadre. */
ARRAY DI CARATTERI:

	char array[20];  //puo memodizzare massimo una stringa a 19 caratteri
			   perche serve un carattere nullo di terminazione 

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  
ARAY NELLA CHIAMATA DI UNA FUNZIONE 

	inizializzazione funzione :	
			tipo funzione (tipo A[] );

	chiamata funzione :	        
			funzione ( A );		//sufficente passare il nome 

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  
ARRAY MULLTI DIMENSIONALE:
				int nome[n][m];

INIZZIALIZAZIONE ARRAY CON PIU INDICI:

	int b[2][2] = { {1,2} , {3,4} };

	N.B. int b[2][2] = { {1} , {3,4} };      //inizzializza b[0][0] = 1  
							        b[0][1] = 0
	
-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  
ARAY MULTIDIMENSIONALE NELLA CHIAMATA DI UNA FUNZIONE 

	int funzione (tipo A[vuoto][dimensione]);  //la funzione riceverà 
						     l'indirizzo del primo 
                                                     elemento dell'array
SCRIVERE DENTRO UNA MATRICE IN ORDINE 

int matrice[X][Y];

	//primo for che scorre le linee

    	for(int linea = 0; linea < X; linea++){
		
		//secondo for che scorre le colonne

        	for(int colonne = 0; colonne < Y; colonne++){
		    printf("inserire il valore dell'elemento %d,%d:\n",X, Y);           	    
		     scanf("%d",&matrice[ligne][colonne]);
        	}
	}

-----------------------------------------------------------------------------
TABELLA DI PAROLE

     char a[3] = {'l','a', };
     char b[6] = {'b','o','n','n','e'};
     char c[9] = {'n','o','u','v','e','l','l','e'};
     
     char * mots[3] = {a,b,c};
     return 0;

-----------------------------------------------------------------------------
PIU PAROLE IN UNA MATRICE

	//GENERO UNA MATRICE [X]linee [y]colonne 
	// potrei anche dire [x]array di [y] elementi

	char m[X][Y];
    		scanf("%s", m[0]);	//scansiono la prima parola
    		scanf("%s", m[1]);	//scansiono la seconda parola 
    		scanf("%s", m[2]);	//scansiono la terza parola

	//scrivo un ciclo for che stampa le parole
	
	for (int i = 0; i < X ; i++){
        stampaParola(m[i]);
	}

	//scrivo la funzione StampaParola
		
	void afficheMot(char * parola){

   		int i = 0;			//contatore
    		while(parola[i]!='\0'){		//ciclo che si interrompe 
						  quando trova uno spazio

        		printf("%c",mot[i]);	//stampa lettera
        		i++;			//incremento contatore
    		}
    		printf("\n");