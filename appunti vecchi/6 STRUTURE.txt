STRUTTURE
possono contenere variabili di vari tipi differenti di dati.

#include<stdio.h>

struct datiPersona {           //creo la struttura persona e metto al suo interno le sue caratteristiche. 
            char nome[20];
            char cognome[20];
            int eta ;
            float altezza;

    } persona ;                  //ricordare di terminare con il punto e virgola
	 ^
	 |
	nome della variabile struttura 

//ora posso utilizzare il tipo "persona" come se fosse un "int" all'interno del programma main o delle altre funzioni. 

int main (){

    //creo un array di 10 individuo!!!! 
    //ogni individuo al suo interno avrà lo spazio per le sue informazioni di persona.

    persona individuo[10];
        ^       ^       
        |       |
        |       |
       tipo    nome 

    individuo[0].età = 120;  //dico che l'individuo numero 0 ha un eta di 120 
}
-----------------------------------------------------------------------------
DEFINIZIONI DI VARIABILI DI TIPO STRUTTURA

struct carta UnaCarta, Mazzo[52], *CartaPtr;
		^         ^           ^
		|         |           |
		|         |           Puntatore a struct carta
		|         |          
		|         Mazzo un array con 52 elementi struct carta           
		|                   
		Variabile di tipo struct carta                  

N.B. 
   Avrei potuto fare la STESSA COSA nella dichiarazione della struttura carta

struct carta {

	char *faccia;
	char *seme;

}UnaCarta, Mazo[52], *CartaPtr;
    ^         ^           ^
    |         |           |
    |         |           Puntatore a struct carta
    |         |          
    |         Mazzo un array con 52 elementi struct carta           
    |                   
    Variabile di tipo struct carta   
  
-----------------------------------------------------------------------------
INIZIALIZZAZIONE DI STRUTTURE

struct carta UnaCarta = { "Dieci", "Cuori"};

	crea una variabile di tipon struct carta e 
	inizializza il primo membro faccia con "Dieci"
	inizializza il secondo membro con "Cuori"

-----------------------------------------------------------------------------
ACCESSO AI MEMBRI DELLE STRUTTURE

  OPERATORE DI MEMBRO DI STRUTTURA ( . )
     accede a un membro di una struttura tramite il nome di 
     					     una variabile di tipo struttura.

     printf("%s", UnaCarta.seme );   //stampa il membro seme della variabile 
					    UnaCarta di tipo struttura carta.
	
  OPERATORE DI PUNTATORE A STRUTTURA ( -> )
     accede a un membro della struttura tramite a un puntatore alla strutura                                                                  struttura.
     
     Ipotesi puntatore CartaPtr viene dichiarato puntatore  di UnaCarta
	
	CartaPtr = &UnaCarta;
     
     Stampare il membro seme della variavile UnaCarta di tipo struttura carta
        è sufficiente scrivere:
	
    	printf("%s", CartaPtr->seme );

-----------------------------------------------------------------------------
STRUTTURE CON LE FUNZIONI

3 MODI:
	-Passando i loro membri individuali
	-Passando l'intera strutura
	-Passando un puntatore alla struttura

-----------------------------------------------------------------------------
PUNTATORI DI STRUTTURE

typedef struct coordinate  Coordinate;
 
Coordinate *puntatore1 = NULL; //puntatore di struttura inizializzato a zero

PIU PUNTATORI DI STRUTTURE SULLA STESSA LINEA

Coordinate *puntatore1 = NULL , * puntatore2 = NULL; //ricordare di mettere l'asterisco davanti a ogni puntatore 

-----------------------------------------------------------------------------
*****************************************************************************
TYPEDEF
CREARE DEI NUOVI TIPI CON NOMI A PIACIMENTO 

	typedef "tipo" "nome nuovo" ; 

ES.

	typedef int intero ;    // da adesso con la parola "intero" mi 
							  riferisco agli int.

	typedef unsigned int Uintero ; //da adesso con la parola "Uintero" 
					mi riferisco agli interi senza segno.

	typedef struct persona {        
            	char nome[20];
            	char cognome[20];
            	int eta ;
            	float altezza;
	}nemo;                      //da adesso quando scrivo "nemo" creo ua 
				      variabile di tipo struct persona di nome nemo





-----------------------------------------------------------------------------
*****************************************************************************
INVIARE UNA STRUTTURA A UNA FUNZIONE 
bisogna inviare alla funzione un puntatore della struttura (ovvero il suo indirizzo)

	int main(){

    		tipoStruttura nomeStruttura;

    		FunzionePuntatoreInIngresso(&nomeStruttura);

    	return 0;
	}

	void FunzionePuntatoreInIngresso(tipoStruttura * point){

    		// volento modificare i valori interni della struttura dentro la funzione

    		(*point).parametro1 = 35;
    		(*point).parametro2 = 0;

	}

-----------------------------------------------------------------------------
*****************************************************************************
MODIFICARE DEGLI ELEMENTI DI UNA STRUTTURA TRAMITE PUNTATORI 


    
    		(*point).parametro1 = 10;
    		(*point).parametro2 = 20;

		//oppure

    		point -> parametro1 = 10;
    		point -> parametro2 = 20;

		



-----------------------------------------------------------------------------
*****************************************************************************


UNIONI

tipo di dati conb membri che condividono lo stesso spazio in memoria

Lo spazio in memoria occupato sarà uguale a quello del tipo di dato piu grande

DICHIARAZIONE DI UNIUONI

	union numero{
		int x;
		double y;
	}

INIZIALIZZAZIONE

	//dentro alla variabile valore posso salvare sia un int che un double 

	union numero valore = { 10 };

	union numero valore = { 1.43 };

-----------------------------------------------------------------------------
*****************************************************************************
CAMPI DI BIT
I campi di bit permettono un migliore utilizzo della memoria, memorizzando i 				    dati nel minimo numero di bit necessario. 

struct bitCarta{

    unsigned int faccia: 4;  //il membro faccia è memorizzato in 4 bit 
								(2^4 casi)
    unsigned int seme : 2;   //il membro seme è memorizzato in 2 bit 
								(2^2 casi)
    unsigned int colore : 1; //il membro colore è memorizzato in 1 bit 
								(2^1 casi)
};

contiene tre campi di bit unsigned in t (faccia, seme, colore) usati per 
			     rappresentare una carta di un mazzo di 52 carte.

Un campo di bit viene dichiarato facendo seguire il nome di un membro intero 
					  unsigned o signed da due punti (:).
e da una costante intera rappresentante la larghezza del campo 
	              (cioè il numero di bit in cui il membro è memorizzato). 

-----------------------------------------------------------------------------
*****************************************************************************
COSTANTI DI ENUMERAZIONE
è un insieme di costanti intere d i enumerazione rappresentate da identificatori.
I valori in un enum partono da 0, a meno che non sia specificato diversamente 
e vengono incrementati nell’ordine di 1.

	enum mesi{
		GEN, FEB, MAR, APR, MAG, GIU, LUG, AGO, SET, OTT, NOV, DIC
	};     
	    //crea un nuovo tipo, enum months, in cui gli identificatori sono 
	       		 impostati rispettivamente, con gli interi da 0 a 11.

Per numerare i mesi da 1 a 12, usate la seguente enumerazione:

	enum mesi{
		GEN = 1 , FEB, MAR, APR, MAG, GIU, LUG, AGO, SET, OTT, NOV, DIC
	};  

  //il primo valore nella precedente enumerazione è esplicitamente posto a 1, 
                          i valori restanti sono incrementati a partire da 1, 
					   ottenendo così i valori da 1 a 12. 


CREARE UNA VARIABILE DI TIPO ENUMERATORE MESI

	mesi meseAttuale = MAR;


	//oppure
	mesi meseAttuale = 2; 	//se gennaio ha valore 0

	//oppure
	
	mesi meseAttuale = 3;	//se gennaio ha valore  1 

NB QUANDO VADO AD INIZZIALIZZARE GLI ELEMENTI DI UN ENUMERATORE POSSO ANCHE FALO
MANUALMENTE SENZA CHE IL PC LO FACCIA IN MODO AUTOMATICO 
es:

	enum mesi{
		GEN = 79 , FEB = 9, MAR = 88, APR= 11
	}; 

l'importante é che gli elementi non abbiano lo stesso valore 
