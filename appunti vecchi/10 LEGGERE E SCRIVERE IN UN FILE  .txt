ELABORAZIONE DI FILE IN C

Il C vede ogni file semplicemente come uno STREAM (flusso) sequenziale di 
byte (Figura 11.1).

Ogni file termina o con un marcatore di end-of-file ( EOF ).

FUNZIONE  feof()
verifica quando il puntatore al suo interno punta a un end of file 


Gli stream forniscono i canali di comunicazione tra file e programmi. 
Quando un file viene aperto, a esso viene associato uno STREAM,
			è vengono aperti 3 TREAM automaticamente:

    • lo standard input "stdin" (che riceve input dalla tastiera)
    • lo standard output "stdout" (che stampa output sullo schermo)
    • lo standard error "stderr" (che stampa messaggi d’errore sullo schermo)




------------------------------------------------------------------------------------
************************************************************************************

APRIRE E CHIUDERE UN FILE 

Il file deve trovarsi nella stessa cartella o in una sotto-cartella dell'eseguibile".exe"

ES 
	fichier = fopen("test.txt", "r+");	// se il file é nella stessa cartella 
	fichier = fopen("sottoCartella/test.txt", "r+"); //se il file si trova in 
	una sottocartella


SE VOGLIO OPERARE SU UN FILE CHE NON SI TROVA ALTROVE
	devo scrivere il percorso completo del file a partire dalla radice C:
ES:

   SU WINDOWS
	fichier = fopen("C:\\Program Files\\Notepad++\\readme.txt", "r+"); 
	// notare i doppi anti-slash "\\"

   SU LINUX 
	fichier = fopen("/home/mateo/dossier/readme.txt", "r+"); 
	//notare che uso gli slah solo una volta

-----------------------------------------------------------------------------------------

L'estensione del file la scegliamo noi

	LIBRERIE NECESSARIE:
		#include <stdlib.h>
		#include <stdio.h>


1) Chiamiamo la funzionedi aperturadel file "fopen()" che ci invia un puntatore al file.

2) Controlliamo se l'apertura ha avuto esito positivo (cioè se il file esisteva)
   testando il valore del puntatore che abbiamo ricevuto dalla funzione "fopen()"
	
	se il puntatore ottenuto vale NULL allora c'é stato un errore.

   NB. RICORDARE DI INIZIALIZZARE PRIMA IL PUNTATORE A NULL!!!!!!!!!!!!!!!!!!

3) se l'operazione non ha dato errori , allora possiamo operare sul file 

4) terminate le operazioni da fare chiudere il file con la funzione "fclose()"

------------------------------------------------------------------------------------
************************************************************************************
fopen APRIRE UN FILE 

APRIRE UN FILE fopen()

   FILE* fopen(char *nomefile, char *tipologiaDiLettura);

   ENTRATA:  Nome del file txt Tipologia di lettura 

	TIPOLOGIA DI LETTURA 
	r 	apre un file in lettura.

	w 	crea un nuovo file in scrittura; 
		se il file esiste il contenuto precedente verrá 
		sovrascritto da quello successivo.
		se il file non esiste verrá creato.  

	a  	aggiunge (append) alla fine del file; 
		se il file non esiste viene creato.

	r+ 	apre un file in lettura/scrittura; 
		il file DEVE esistere.

	w+ 	crea un nuovo file in lettura/scrittura; 
		Il file viene quindi prima svuotato del suo contenuto, 
		è possibile scriverlo e quindi leggerlo. 
		Se il file non esiste, verrà creato.

	a+ 	aggiunge e legge a partire dalla fine del file; 
		se il file non esiste viene creato.

	rb 	Apre un file esistente per la lettura in forma binaria.

	wb	Crea un file per la scrittura in forma binaria. 
		Se il file esiste già, elimina i contenuti correnti.

	ab	Append: apre o crea un file per la scrittura alla fine 
		del file in forma binaria.

	rb+	Apre un file esistente per l’aggiomamento (lettura escrittura)
		 in forma binaria.

	wb+	Crea un file per l’aggiomamento in forma binaria. 
		Se il file esiste già, elimina i contenuti correnti.

	ab+	Append: apre o crea un file per l’aggiornamento in forma binaria; 
		la scrittura è effettuata alla fine del file.

   RESTITUISCE: NULL nel se non è riuscito ad aprire il file.


ESEMPIO DI LETTURA 

	int main(int argc, char *argv[]){

   	 	FILE* puntatoreFile = NULL;

    		puntatoreFile = fopen("test.txt", "r+");

    		return 0;
	}

-------------------------------------------------------------------------------------
*************************************************************************************

fclose CHIUDERE UN FILE 
	
	CHIUDERE UN FILE fclose()
	chiudere un file dopo averlo utilizzato.

   	fclose( puntatore_a_file )

		ENTRATA:  puntatore del file da chiudere

		RESTITUISCE:	chiusura è andata a buon fine restituisce 0
			NON è andata a buon fine restituisce EOF




-------------------------------------------------------------------------------------
*************************************************************************************

METODI PER SCRIVERE IN UN FILE

	fputc: scrive un CARATTEREnel file (UN SOLO CARATTERE ALLA VOLTA) .

	fputs: Scrive una stringa di caratteri nel file.

	fprintf: Scrive una stringa di caratteri nel file « formattata » nel file,
	 funzionamento quasi identico al printf().


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE  fputc()

	int fputc(int car, FILE *fp)

       	Scrive un carattere su un file, riceve come argomenti un carattere da         
	scrivere e un puntatore per il file su cui verrà scritto il carattere.

	ENTRATA:   int charattere
		   puntatore_a_file

	RESTITUISCE: in caso di successo è il carattere scritto
		     altrimenti EOF
 
	ES:
	   fputc ('a',puntatoreFile); //scrive il carattere 'a' su 
					stdout (lo standard output).


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE fputs()

	int fputs(char *stringa, FILE *fp)

	Scrive una riga(string) su un file;

	ENTRATA:   vettore o puntatore della strtinga
		   puntatore  del file 

	RESTITUISCE: 0 se non si verificano errori 
		     altrimenti EOF

	ES:
           fputs("Salut les Zér0s\nComment allez-vous ?", puntatoreFile);

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - -  -  -

FUNZIONE fprintf()

	funzione che permette di scrivere sui file in modo formattato.

	int fprintf(FILE *fp, "char *formato", argomenti…);

	ENTRATA: puntatore di un file ottenuto dalla chiamata fopen
		 "formato tra le virgolette", con argomenti come un printf

	RESTITUISCE:  un intero (numero dei caratteri scritti nello stream)
		      In caso di insuccesso EOF (end of file).
 
	ES:
	   fprintf( puntatoreFile , "Mario ha %d anni" , numeroDiAnni);


-------------------------------------------------------------------------------------
*************************************************************************************

METODI PER LEGGERE UN FILE


	fgetc: Legge un carattere ;

	fgets: legge una stringa di caratteri;

	fscanf: legge una stringa « formattata ».

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE fgetc()
	Restituisce il carattere che é stato letto (bisogna inserirlo in una variabile)

	int fgetc(FILE *fp)
	 
        Legge un carattere da un file,riceve come argomento un puntatore a FILE 
	per il file da cui si leggerà il carattere.

	ENTRATA: puntatore_a_file
		 
	RESTITUISCE: il valore letto (da salvare o inviare da qualche parte)
		     altrimenti EOF

   	ES: 
           fgetc (puntatoreDelFile);  //legge un carattere da stdin (lo standard input)
  

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE fgets()
	legge una stringa nel file, si ferma al primo "\n".
	Se vuoi leggere diverse righe, dovrai fare un ciclo.

	char* fgets(char *stringa, int LunghezzaMax, FILE *fp)

        legge una riga (string) da un file;

	ENTRATA:  vettore di caratteri o puntatore della stringa
		  lunghezza massima vettore 
		  puntatore del file da leggere

	RESTITUISCE: puntatore alla stringa 
		     oppure errore restituisce NULL

	ES:
	   fgets(PuntatoreStringaContenitore, lunghezzaMassima , PuntatoreDelFile);

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE fscanf()
	Legge da un file in modo formattato, chiaramente dopo l’apertura con fopen.
	ed effettua la scansione.
	
	Permette di salvare le stringhe lette in varie variabili distinte. 

	int fscanf(FILE *fp, "char *formato", [argomenti]...)

	ENTRATA: puntatore allo stream
		 altri argomenti come scanf

	RESTITUISCE: ritorna un valore intero, che rappresenta 
		     il numero di caratteri letti.

 	ES:
	   fscanf(PuntatoreFile, "%d %d %d", &valore[0], &valore[1], &valore[2]);


-------------------------------------------------------------------------------------
*************************************************************************************

METODI PER EFFETTUARE DEGLI SPOSTAMENTI IN UN FILE



	ftell:  mostra dove ti trovi attualmente nel file.

	fseek:  Posizionare il cursore in una posizione specifica;

	rewind: rimette il cursore all'inizio del file 
	(equivale a chiedere alla funzione fseek di posizionare il cursore all'inizio).
-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE ftell()

	Restituisce la posizione corrente del cursore sotto forma di: long

	long ftell(FILE* puntatoreSulFile);

	Il numero restituito indica quindi la posizione del cursore nel file.

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE fseek()
	permette di spostare il cursore di un certo numero di caratteri a 
	partire dalla posizione di origine

	int fseek(FILE* puntatoreSulFile, long SPOSTAMENTO, int ORIGINE);

		SPOSTAMENTO:
			1) numero POSITIVO per spostarsi in avanti 
			2) nullo = 0 per non spostarsi 
			3) numero NEGATIVO per spostarsi indietro 


		In ORIGINE si possono mettere una delle 3 costanti generalmente definite:

			1) SEEK_SET   indica l'inizio di un file;

			2) SEEK_CUR   indica la posizione attuale del cursore;

			3) SEEK_END   indica la fine del file;


	ES:
	   Il codice seguente posiziona il cursore due caratteri dopo l'inizio:

		fseek(fichier, 2, SEEK_SET);

	   Il codice seguente antepone il cursore a quattro caratteri alla 
		posizione corrente:

		fseek(fichier, -4, SEEK_CUR);

	   Il codice seguente posiziona il cursore alla fine del file:

		fseek(fichier, 0, SEEK_END);

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE rewind()
	Questa funzione equivale all'utilizzo per riportarci 
	alla posizione 0 nel file.fseek

	void rewind(FILE* pointeurSurFichier);
	
	L'uso è semplice come il prototipo


-------------------------------------------------------------------------------------
*************************************************************************************

METODI PER RINOMINARE ED ELIMINARE UN FILE 

	rename : Rinomina un file;

	remove : Elimina un file.

	NON richiedono un puntatore a file per funzionare
	Basta indicare il nome del file da rinominare o eliminare.

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -


FUNZIONE rename()

	int rename( const char* vecchioNome , const char* nuovoNome );

	La funzione restituisce 0 se è riuscita a rinominare, altrimenti 
	restituisce un valore diverso

	ES:
	   int main(int argc, char *argv[]){
    		rename("test.txt", "test_renomme.txt");
    		return 0;
	   }

-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

FUNZIONE remove()

	int remove(const char* fileDaEliminare );

Elimina il file elencato senza chiedere conferma! 
Il file non viene messo nel cestino, viene letteralmente rimosso dal disco rigido.



	ES:
	   int main(int argc, char *argv[]){
    		remove("test.txt");
    		return 0;
	   }













