FUNZIONI DI I/O

    tipo nome = getchar()	legge un CARATTERE per volta dalla tastiera 
				(per interromperlo premere CtrL+D) 

    putchar()	legge un carattere alla volta e lo stampa a video

    puts()		stampa una stringa seguita dal carattere \n
	
    toupper()	trasforma il carattere in entrata nell'equivalente
			in maiuscolo

    printf()	Fa stampare sullo schermo la stringa di caratteri 
			compresa tra le virgolette. 

    sprintf(char *s , " ... " )	
			    l'ouput è memorizzato in un array *s invece di 
			    essere stampato direttamente a schermo. 
			    Restituisce gli elementi letti con successo 
			    oppure EOF se c'è stato un errore.

    scanf()		Legge un valore dallo Standerd Input

    sscanf(char *s, " ... ")
		    l'input è letto dall'array *s invece che dalla tastiera.
		    Restituisce il numero di alementi letti con successo o
		    EOF se c'è stato un errore:				
----------------------------------------------------------------------------
#include<string.h>
strtod()	converte una sequenza di caratteri che rappresenta 
		un valore in virgola mobile e lo converte in un Double

	const char *1arg = "1194343wewr";
	char *2arg;
	double X = strtod( 1arg , 2arg ); 

	1arg = array di caratteri o puntatore a caratteri 
	
	2ard = puntatore dell'array o puntatore del puntatore a caratteri
----------------------------------------------------------------------------
#include<string.h>
strtol()		converte una sequenza di caratteri in un long int 
	
	const char *1arg = "1194343wewr";
	char *2arg;
	long X = strtol( 1arg , &2arg , 3arg )



	1arg = 	stringa che contiene la sequenza di caratteri da convertire

	2arg = 	puntatore che punterà alla locazione dl primo 
		carattere della stringa

	3arg = 	numero intero che specifica la base del valore da convertire
 
	    0 = decimale  ;  2 = binario  ;  8 = ottale  ;  16 = esadecimale
----------------------------------------------------------------------------
#include<string.h>
strtoul()      converte una sequenza di caratteri SENZA SEGNO in un long int

	       la funzione lavora in maniera identica a strtol()

----------------------------------------------------------------------------
COPIA E INCOLLA #include<string.h>

     char *strcpy( char *s1, const char *s2 );	
				Copia la stringa s2 nell'array s1.
				Viene restituito il valore di s1.

     char *strncpy(char *s1, const char *s2, size_t n )
     			        Copia al massimo n caratteri della stringa s2
     			        nell'array s1 e restituisce s1.

	char *strcat( char *s1, const char *s2 );
			        Aggiunge la stringa s2 in coda alla stringa 
				contenuta nell?array s1.
			        Il primo carattere di s2 sovrascrive il 
                                carattere nullo di terminaziopne di s1, 
				viene restituito s1.
	
	char *strncat(char *s1, const char *s2, size_t n );
				Aggiunge al massimo n caratteri della stringa
                                s2 in coda alla stringa contenuta 
				nell'array s1.
				Il primo carattere di s2 sovrascrive il 
				carattere nullo di terminaziopne di s1, 
				viene restituito s1. 

-----------------------------------------------------------------------------
CONFRONTO DI STRINGHE
	int strcmp( const char *s1 , const char *s2 );
				Confronta la stringa s1 con la stringa s2.
 				RESTITUISCE:
					0 se sono uguali
					1 se sono diversi
				
	

	int strncmp(const char *s1, const char *s2, size_t n );
				Confronta fino a n caratteri della stringa s1
				con la stringa s2. 
				La funzione restituisce 0, un valore minore 
				di 0 o maggiore di 0 se s1
				è, rispettivamente, uguale, minore o maggiore
				di s2.	

----------------------------------------------------------------------------
RICERCA NELLE STRINGHE

	char *strchr(const char *s, int c);
				Localizza la prima occorrenza del carattere c
				nella stringa s. 
				Se c viene trovato, viene restituito un 
				puntatore a c in s. Altrimenti, viene 
				restituito un puntatore NULL.

	size_t strcspn(const char *s1, const char *s2);
				Determina e restituisce la lunghezza del 
				segmento iniziale della stringa s1 
				costituito da caratteri NON CONTENUTI 
				nella stringa s2.

	size_t strspn(const char *s1, const char *s2);
				Determina e restituisce la lunghezza del 
				segmento iniziale della stringa s1 costituito
				solo da caratteri CONTENUTI nella stringa s2.
	
	char *strpbrk(const char *s1, const char *s2);
				Localizza la prima occorrenza di un carattere 
				della stringa s2 nella stringa s1. 
				Se viene trovato un carattere della 
				stringa s2, viene restituito un puntatore al
				carattere nella stringa s1. 
				Altrimenti, restitutisce un puntatore NULL.

	char *strrchr(const char *s, int c);
			        Localizza l’ultima occorrenza di c 
				nella stringa s.
				Se c viene trovato, viene restituito un 
				puntatore a c nella stringa s,
				Altrimenti viene restituito un puntatore NULL

	char *strstr(const char *s1, const char *s2);
				Localizza la prima occorrenza della 
				stringa s2 nella stringa s1.
				Se la stringa viene trovata, viene restituito 
				un puntatore alla stringa in s1, 
				Altrimenti restituisce un puntatore NULL.

	char *strtok(char *s1, const char *s2);
				Una sequenza di chiamate a strtok suddivide 
				la stringa s1 in una collezione di token 
			(unità logiche come le parole in una riga di testo)
			separati da caratteri contenuti nella stringa s2. 
			La prima chiamata contiene s1 come primo argomento,
			mentre le successive chiamate per continuare a 
			suddividere in token la stessa stringa contengono
			NULL come primo argomento. 
			A ogni chiamata viene restituito un puntatore 
			al token corrente. 
			Se non vi sono più token quando la funzione è 
			chiamata, viene restituito NULL.

----------------------------------------------------------------------------
GESTIONE DELLA MEMORIA TRATTAMENTO STRINGHE 
	
	void *memcpy(void * s1, const void *s2 , size_t n );
			Copia n byte dall’oggetto puntato da s2 nell’oggetto 
			puntato da s1.
			Viene restituito un puntatore all’oggetto risultante.

	void *memmove(void * s1, const void *s2, size_t n);
		    Copia n byte dall’oggetto puntato da s2 nell’oggetto 
		    puntato da s1. 
		    La copia è eseguita come se i byte fossero dapprima 
		    copiati dall’oggetto puntato da s2 in un array temporaneo
		    e poi dall’Array temporaneo nell’oggetto puntato da s1.
		    Viene restituito un puntatore all’oggetto risultante.

	int memcmp(const void * s1, const void *s2, size_t n);
			Confronta i primi n byte degli oggetti puntati da s1 
			ed s2. 
			La funzione restituisce 0, un numero minore di 0 o 
			maggiore di 0, se s1 è, rispettivamente, 
			uguale, minore o maggiore di s2.

	void *memchr(const void *s, int c, size_t n);
			     Localizza la prima occorrenza di c 
			     (convertito in un unsigned char) 
			     nei primi n byte dell’oggetto puntato da s. 
			     Se c viene trovato, 
			     viene restituito un puntatore a c nell’oggetto, 
			     altrimenti viene restituito NULL.

	void *memset(void *s, int c, size_t n);
				Copia c (convertito in un unsigned char) 
				nei primi n byte dell’oggetto puntato da s.
				 Viene restituito un puntatore al risultato.

----------------------------------------------------------------------------
DETERMINARE LUNGHEZZA STRINGHE


	size_t strlen (const char *s);
			Determina la lunghezza della stringa s. 
			Viene restituito il numero di caratteri che precedono 
			il carattere nullo di terminazione.

	char * strerror(in t errornum);
		Mappa errornum in una stringa di testo secondo una modalità
		specifica per il compilatore e per la località geografica 
		(es. il messaggio può comparire in lingue differenti in base
		alla località geografica del computer). 
		Viene restituito un puntatore alla stringa.
		I numeri di errore sono definiti in errno.h.

