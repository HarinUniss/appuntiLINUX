########################################################################################################
GREP 	filtrare i dati
########################################################################################################

permette di ricercare una parola dentro al file e di stampare la linea in cui è stata trovata 

grep "testo" nomeFile		cerca tutte le linee contenenti il testo e le stampa a schermo 



	-i 	permette di non considerare minuscole e maiuscole


	-n 	stampa anche il numero della linea dove ho trovato il testo 

	-v 	IGNORO le linee contenenti il testo

	-r	ricercare in tutti i file dalla directory e delle sotto directory 
		in questo caso al posto del nomeFile metterò l'indirizzo della directory

		"grep -r"  si puo anche scrivere "rgrep"


	-E	UTILIZZARE GREEP CON DELLE ESPRESSIONI REGOLARI 	
		
		"grep -E"  si puo anche scrivere "egrep"
		Carattere	significato

		.			Carattere di qualsiasi tipo

		^			Parola a inizio linea

		$			Parola a fine linea
	
		[]			Uno dei caratteri tra le parentesi

		?			Il carattere precedente è facoltativo (può essere presente 0 o 1 volta)

		*			Il carattere precedente può essere presente 0, 1 o più volte

		+			Il carattere precedente deve essere presente una o più volte

		|			Dove

		()			Gruppo di espressioni


		ESEMPI
		grep -E [Aa]lias .bashrc	mostra tutte le linee che contengono Alias con A maiuscola o minuscola

		grep -E [0-4] .bashrc		mostra tutte le line contenenti un NUMERO DA 0 a 4

		grep -E [a-zA-Z] .bashrc	mostra tutte le linee che hanno dei caratteri che vanno da "A" a "Z" oppure da "a" a "z"
########################################################################################################
cat 	stampa un file
########################################################################################################

	cat nomeFile.txt

########################################################################################################
head	stampa le 10 prime righe di un file
########################################################################################################

	head nomeFile.txt

	head -numeroLinee nomeFile.txt		per decidere quante linee visualizzare

########################################################################################################
tail	stampa le 10 ultime righe di un file
########################################################################################################

	tail nomeFile.txt


	tail -numeroLinee nomeFile.txt		per decidere quante linee visualizzare




########################################################################################################
SORT 	selezionare e organizzare il contenuto di un file 
########################################################################################################

sort nomeFile 		ordina le righe in ordine alfabetico, i numeri hanno ancora piu precedenza 
			NON differenzia tra minuscolo e Maiuscolo 

	-o 	scrive il risultato in un file 

			sort -o nomiOrdinati.txt nomi.txt

	-r 	ordina in modo INVERSO 

	
	-R	odina A CASO!!! 

	-n 	ordina i numeri ma li mette per ultimi rispetto alle lettere 
		inoltre leggerà tutta la riga del numero non solo il primo carattere
	
ORDINARE RISPETTO A UNA COLONNA DIVERSA DALLA PRIMA 
	
	-k 	 cat file.txt | sort -k 2	ordino rispetto alla seconda colonna

	-t	se il separatore delle colonne non è uno spazio bisogna specificarlo con -t

		es:
		cat file.txt | sort -kn 3 -t ":"	ordine numerico crescente della 3 colonna con separatore :
########################################################################################################
WC 	contare il numero di linee
########################################################################################################

wc nomeFile	stampa: numeroLinee numeroParole numeroByte

	-l 	stampa solo il numero di linee

	-w 	stampa solo il numero di parole

	-m	stampa il numero dei caratteri 

	-c 	stampa il numero di Byte occupati dal file 
	
	
	

########################################################################################################
uniq 	eliminare righe doppie dalla stampa
########################################################################################################

uniq nomeFil
	il comando funziona solo se una o piu  linee successive tra loro sono uguali 
	è meglio prima creare un file ordinato ALTRIMENTI NON FUNZIONA

	-c 	stampa anche il numero che indica quante volte è presente la riga 

	-d	stampa solo una volta le righe che sono DOPPIE  (NON triple)

########################################################################################################
split	permette di separare un file in piu file
########################################################################################################

	split -numeroFile nomeFile

	split -l numeroFile nomeFile	faccio dei file della stessa dimensione 




########################################################################################################
cut 	stampa una parte del file 
########################################################################################################

	cut -c 2-5 noms.txt 		conserva unicamente i caratteri da 2 a 5 di ogni linea

	
	cut -c -3 noms.txt 		conserva i primi 3 caratteri di ogni linea

	
DELIMITARE UN FILE 


     cut -d <simboloDelimitazione> -f 1 nomeFile

	POSSO ANCHE METTERE IL DELIMITATORE TRA VIRGOLETTE ""

      cut -d "<simboloDelimitazione>" -f 1 nomeFile
	

	ESEMPIO DI FILE
	_________________________________________________
	| Fabrice,18 / 20,Excellent travail		|
	| Mathieu,3 / 20,Nul comme d'hab		|
	| Sophie,14 / 20,En nette progression		|
	| Mélanie,9 / 20,Allez presque la moyenne !	|
	|-----------------------------------------------|
	le VIRGOLE delimitano i blocchi che si possono stampare singolarmente 


	-d 	indica che c'è un DEELIMITATORE nel file 
	-f 	indica il numero blocco che si vuole stamppare

	NB IN QUESTI ESEMPI HO SCELTO LA VIRGOLA COME DELIMITATORE
		
	cut -d , -f 1 nomeFile		stamperà i primi blocchi delle righe 	
	
	cut -d , -f 2 nomeFile		stamperà i secondi blocchi delle righe 

	cut -d , -f 3 nomeFile		stamperà i terzi blocchi delle righe 

	cut -d , -f 1,3 nomeFile	stamperà i primi e i terzi blocchi delle righe 

	cut -d , -f 2- nomeFile		stamperà DAL SECONDO BLOCCO IN POI PER OGNI RIGA 
	
	
	
	NB ricordare di non lasciare spazio tra le virgole del comando se si vogliono individuare piu blocchi


STAMPARE IN SUCESSIONE PIU FILE 

	cut file1.txt file2.txt


	
########################################################################################################
less	stampare il file 
########################################################################################################

	less 	permette di spostarmi nel file 

		RICERCA ALLL INTERNO DI less 
			/lettereCheCerco

	q 	per uscire

########################################################################################################
paste		COLLAGE DI PARTI DI FILE 
########################################################################################################
	aggiunge alla prima riga del promo file la prima del secondo e cosi via per le altre righe 

	paste file1.txt file2.txt

	-d 	per specificare un delimitatore diverso dallo spazio



########################################################################################################
join 		COLLAGE DI PARTI DI FILE 
########################################################################################################
	funziona come paste con la differenza che posso andaare a specificare che linee e che colonne copiare

	join 

-----------------------------------------------------------------------------------------------
########################################################################################################
FILTRI POTENTI PROGRAMMABILI 
########################################################################################################


	awk 'comandoAwk' file

	VARIABILI INTERNE ALA FUNZIONE awk 
		$0 	variabile contenente la linea completa
		$1 	variabile contenente primo campo 
		$3	variabile contenente il terzo campo 

		NR 	variabile che riporta il numero di righe 

	-F 	per cambiare  il separatore dei canmpi che di base è uno spazio 

	-FS 	per cambiare il valore di un a variabile 

	

awk ’{print $2 " " $1 " " $3 " " $4}’ file.txt		stampa contenuto del file.txt e scambia l'ordine del primo e del secondo campo
							in questo caso bisogna esplicitare i separatori di ogni campo tramite le virgolette 


awk ’{print $2 " " $1 " " $3 "-" $4 " age: " $4 - $3}’ file.txt		permette di fare dei calcoli e aggiungere del testo 
									in questo caso aggiungo il separatore Age: e subito dopo faccio il calcolo del campo $4 - $3



OPERAZIONI PIU COPMPLESSE 
	

awk ’ BEGIN { operazioni prima di leggere e trattare il file }
	    { operazioni che trattano il file }
      END   {operazioni da fare una volta letto il file} ’ file.txt




	es:
		awk ’ BEGIN {print "Gli informatici :"}
		            {print $2 " " $1 " " $3 "-" $4 " age: " $4 - $3}
                      END   {print "C'è ne sono : " NR ". Ne vogliamo di piu."}’ file.txt

	
		Gli informatici :
		LOVELACE Ada 1815-1852 age: 37
		EASLEY Annie 1933-2011 age: 78
		HOPPER Grace 1906-1992 age: 86
		C'è ne sono : 3. Ne vogliamo di piu.


-----------------------------------------------------------------------------------------------------
################################################################################################
sed 		editare contenuto di file in modo automatico
################################################################################################

	sed	's/espressioneRegolare/nuovaStringa/g' file1.txt file2.txt


	s	indica che voglio sostituire la stringa identificata dall'espressione regolare 
	
	g 	dice di fare l'operazione su tutte le stringhe rilevate tramite l'espressione regolare

	-e 	quando voglio impartire piu direttive nello stesso comando 

	es:
		sed ’s/alice/bob/g’ file1.txt file2.txt		legge sia il file1 che il 2 e sostitutisce tutti i nomi Alice con il nome Bob

		 sed ’s/alice//g’ file1.txt file2.txt		elimina il nome alice da entrambi i file "ricorda che NON VIENE MODIFICATO IL FILE, l'eliminazione avviene solo nella stampa "
	
		 cat fichier | sed -e ’s/a/A/g’ -e ’s/TA/ta/g’	uso piu direttive

	
DECIDERE SU QUANTE LINEE EFFETTUARE IL COMANDO
		
	es:	sed ’1,5s/UNIX/*nix/g’ file.txt		opero dalla prima linea fino alla quinta inclusa

	es:	sed -e ’/^C/s/Bash/BASH/g’ file.txt	opero su TUTTE LE LINE che COMINCIANO per C
	
	es:	sed -e ’/that/s/Bash/BASH/g’ file.txt	opero sulle linee contenente la parola "that"

	es:	sed -e ’s/L.*x/XXX/g’ slogan.txt	SOSTITUISCE TUTTE LE STRINGHE contenenti i caratteri "L" e "x" con "XXX"
           
ELIMINARE STRINGHE 

	es:	 sed -i ’’ -e ’/^L*e$/d’ slogan.txt	elimina tutte le stringhe che iniziano per "L" e terminano con "e"

	es:	 sed -i ’/Linux/d’ slogan.txt		elimino tutte le ninee contenenti la parola "Linux"\



OPERAZIONI ANCORA PIU POTENTI 
	
	es:	sed -e ’s/.*/Je dis: &/’ slogan.txt	metto il PREFISSO davanti a ogni linea "Je dis: "

		& 	indica di inserire in quel punto la stringa del testo 
		.*	indica tutta la linea

	-----------------------------------------------------------------------------
	ESEMPIO ANCORA PIU TOSTO 
	-----------------------------------------------------------------------------

	$ cat date.txt
	2017-01-21
	2019-11-09
	2012-08-17
	2003-15-13

	$ sed -e ’s/\(.*\)-\(.*\)-\(.*\)/date: \3 \2 \1/’ date.txt
	date: 21 01 2017
	date: 09 11 2019
	date: 17 08 2012
	date: 13 15 2003
	
                                                                                                                                                                                                                                                                                                                                                      